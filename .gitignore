__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
lightweight-cnn/venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyTorch
#  project, you might want to ignore PyCharm files:
.idea/

# VS Code
.vscode/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# ===== MACHINE LEARNING SPECIFIC =====

# Data directories
data/
data_raw/
my_cifar_data/
datasets/
raw_data/
processed_data/

# Model checkpoints and weights
checkpoints/
*.pth
*.pt
*.ckpt
*.h5
*.hdf5
*.pkl
*.pickle
models/
saved_models/
weights/

# Training logs and outputs
runs/
logs/
tensorboard_logs/
wandb/
mlruns/
outputs/
results/

# Generated plots and visualizations
plots/
figures/
*.png
*.jpg
*.jpeg
*.pdf
*.svg
# Exception: Keep example plots in docs
!docs/**/*.png
!docs/**/*.jpg
!docs/**/*.pdf
!README_images/

# Experiment tracking
.neptune/
.comet/
experiments/

# Jupyter notebook outputs
*.ipynb
# Exception: Keep clean notebooks for documentation
!docs/**/*.ipynb
!examples/**/*.ipynb

# Large files (use Git LFS instead)
*.zip
*.tar
*.tar.gz
*.rar
*.7z

# Temporary files
tmp/
temp/
cache/
.cache/

# Configuration overrides (keep template configs)
config_local.yaml
config_override.yaml
local_config.yaml
# Keep the main config
!config.yaml

# Hydra outputs
.hydra/
hydra_outputs/
multirun/

# Docker
.dockerignore

# Conda
*.conda
*.tar.bz2

# Virtual environments
conda-meta/
.conda/

# IDE specific
*.swp
*.swo
*~

# OS generated files
.directory
.fuse_hidden*
.nfs*

# Backup files
*.bak
*.backup
*.old

# ===== PROJECT SPECIFIC =====

# CIFAR-10 specific
cifar-10-batches-py/
cifar-10-python.tar.gz

# Custom data splits
train_split.txt
val_split.txt
test_split.txt

# Evaluation results
evaluation_results/
predictions/
confusion_matrices/

# Profiling results
*.prof
*.profile

# Memory dumps
*.dump
core.*